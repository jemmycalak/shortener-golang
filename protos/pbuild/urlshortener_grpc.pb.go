// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.2
// source: protos/urlshortener.proto

package pbuild

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UrlShortenerServiceProtoClient is the client API for UrlShortenerServiceProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlShortenerServiceProtoClient interface {
	Create(ctx context.Context, in *UrlShortenerProto, opts ...grpc.CallOption) (*UrlShortenerProto, error)
	Edit(ctx context.Context, in *UrlShortenerProto, opts ...grpc.CallOption) (*UrlShortenerProto, error)
	Statistic(ctx context.Context, in *GetStatisticByUrlRequest, opts ...grpc.CallOption) (*GetStatisticByUrlResponse, error)
	SearchByShortUrl(ctx context.Context, in *SearchByShortUrlRequest, opts ...grpc.CallOption) (*UrlShortenerProto, error)
	IncreaseAccessed(ctx context.Context, in *IncreaseAccessedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type urlShortenerServiceProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlShortenerServiceProtoClient(cc grpc.ClientConnInterface) UrlShortenerServiceProtoClient {
	return &urlShortenerServiceProtoClient{cc}
}

func (c *urlShortenerServiceProtoClient) Create(ctx context.Context, in *UrlShortenerProto, opts ...grpc.CallOption) (*UrlShortenerProto, error) {
	out := new(UrlShortenerProto)
	err := c.cc.Invoke(ctx, "/protos.UrlShortenerServiceProto/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerServiceProtoClient) Edit(ctx context.Context, in *UrlShortenerProto, opts ...grpc.CallOption) (*UrlShortenerProto, error) {
	out := new(UrlShortenerProto)
	err := c.cc.Invoke(ctx, "/protos.UrlShortenerServiceProto/Edit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerServiceProtoClient) Statistic(ctx context.Context, in *GetStatisticByUrlRequest, opts ...grpc.CallOption) (*GetStatisticByUrlResponse, error) {
	out := new(GetStatisticByUrlResponse)
	err := c.cc.Invoke(ctx, "/protos.UrlShortenerServiceProto/Statistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerServiceProtoClient) SearchByShortUrl(ctx context.Context, in *SearchByShortUrlRequest, opts ...grpc.CallOption) (*UrlShortenerProto, error) {
	out := new(UrlShortenerProto)
	err := c.cc.Invoke(ctx, "/protos.UrlShortenerServiceProto/SearchByShortUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerServiceProtoClient) IncreaseAccessed(ctx context.Context, in *IncreaseAccessedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protos.UrlShortenerServiceProto/IncreaseAccessed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlShortenerServiceProtoServer is the server API for UrlShortenerServiceProto service.
// All implementations must embed UnimplementedUrlShortenerServiceProtoServer
// for forward compatibility
type UrlShortenerServiceProtoServer interface {
	Create(context.Context, *UrlShortenerProto) (*UrlShortenerProto, error)
	Edit(context.Context, *UrlShortenerProto) (*UrlShortenerProto, error)
	Statistic(context.Context, *GetStatisticByUrlRequest) (*GetStatisticByUrlResponse, error)
	SearchByShortUrl(context.Context, *SearchByShortUrlRequest) (*UrlShortenerProto, error)
	IncreaseAccessed(context.Context, *IncreaseAccessedRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUrlShortenerServiceProtoServer()
}

// UnimplementedUrlShortenerServiceProtoServer must be embedded to have forward compatible implementations.
type UnimplementedUrlShortenerServiceProtoServer struct {
}

func (UnimplementedUrlShortenerServiceProtoServer) Create(context.Context, *UrlShortenerProto) (*UrlShortenerProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUrlShortenerServiceProtoServer) Edit(context.Context, *UrlShortenerProto) (*UrlShortenerProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (UnimplementedUrlShortenerServiceProtoServer) Statistic(context.Context, *GetStatisticByUrlRequest) (*GetStatisticByUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Statistic not implemented")
}
func (UnimplementedUrlShortenerServiceProtoServer) SearchByShortUrl(context.Context, *SearchByShortUrlRequest) (*UrlShortenerProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByShortUrl not implemented")
}
func (UnimplementedUrlShortenerServiceProtoServer) IncreaseAccessed(context.Context, *IncreaseAccessedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseAccessed not implemented")
}
func (UnimplementedUrlShortenerServiceProtoServer) mustEmbedUnimplementedUrlShortenerServiceProtoServer() {
}

// UnsafeUrlShortenerServiceProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlShortenerServiceProtoServer will
// result in compilation errors.
type UnsafeUrlShortenerServiceProtoServer interface {
	mustEmbedUnimplementedUrlShortenerServiceProtoServer()
}

func RegisterUrlShortenerServiceProtoServer(s grpc.ServiceRegistrar, srv UrlShortenerServiceProtoServer) {
	s.RegisterService(&UrlShortenerServiceProto_ServiceDesc, srv)
}

func _UrlShortenerServiceProto_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlShortenerProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServiceProtoServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UrlShortenerServiceProto/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServiceProtoServer).Create(ctx, req.(*UrlShortenerProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortenerServiceProto_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlShortenerProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServiceProtoServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UrlShortenerServiceProto/Edit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServiceProtoServer).Edit(ctx, req.(*UrlShortenerProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortenerServiceProto_Statistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticByUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServiceProtoServer).Statistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UrlShortenerServiceProto/Statistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServiceProtoServer).Statistic(ctx, req.(*GetStatisticByUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortenerServiceProto_SearchByShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServiceProtoServer).SearchByShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UrlShortenerServiceProto/SearchByShortUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServiceProtoServer).SearchByShortUrl(ctx, req.(*SearchByShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortenerServiceProto_IncreaseAccessed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseAccessedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServiceProtoServer).IncreaseAccessed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.UrlShortenerServiceProto/IncreaseAccessed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServiceProtoServer).IncreaseAccessed(ctx, req.(*IncreaseAccessedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UrlShortenerServiceProto_ServiceDesc is the grpc.ServiceDesc for UrlShortenerServiceProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UrlShortenerServiceProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.UrlShortenerServiceProto",
	HandlerType: (*UrlShortenerServiceProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UrlShortenerServiceProto_Create_Handler,
		},
		{
			MethodName: "Edit",
			Handler:    _UrlShortenerServiceProto_Edit_Handler,
		},
		{
			MethodName: "Statistic",
			Handler:    _UrlShortenerServiceProto_Statistic_Handler,
		},
		{
			MethodName: "SearchByShortUrl",
			Handler:    _UrlShortenerServiceProto_SearchByShortUrl_Handler,
		},
		{
			MethodName: "IncreaseAccessed",
			Handler:    _UrlShortenerServiceProto_IncreaseAccessed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/urlshortener.proto",
}
